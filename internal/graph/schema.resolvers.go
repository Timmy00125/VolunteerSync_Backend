package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/volunteersync/backend/internal/core/auth"
	"github.com/volunteersync/backend/internal/graph/generated"
	"github.com/volunteersync/backend/internal/graph/model"
	"github.com/volunteersync/backend/internal/middleware"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	registerReq := &auth.RegisterRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}

	authResp, err := r.AuthService.Register(ctx, registerReq)
	if err != nil {
		return nil, fmt.Errorf("registration failed: %w", err)
	}

	return &model.AuthPayload{
		Token:        authResp.AccessToken,
		RefreshToken: authResp.RefreshToken,
		User:         mapUserToGraphQL(authResp.User),
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	loginReq := &auth.LoginRequest{
		Email:    input.Email,
		Password: input.Password,
	}

	authResp, err := r.AuthService.Login(ctx, loginReq)
	if err != nil {
		return nil, fmt.Errorf("login failed: %w", err)
	}

	return &model.AuthPayload{
		Token:        authResp.AccessToken,
		RefreshToken: authResp.RefreshToken,
		User:         mapUserToGraphQL(authResp.User),
	}, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.AuthPayload, error) {
	authResp, err := r.AuthService.RefreshToken(ctx, input.RefreshToken)
	if err != nil {
		return nil, fmt.Errorf("token refresh failed: %w", err)
	}

	return &model.AuthPayload{
		Token:        authResp.AccessToken,
		RefreshToken: authResp.RefreshToken,
		User:         mapUserToGraphQL(authResp.User),
	}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	userID := middleware.GetUserIDFromContext(ctx)
	if userID == "" {
		return false, fmt.Errorf("unauthorized: user ID not found in context")
	}

	err := r.AuthService.Logout(ctx, userID)
	if err != nil {
		return false, fmt.Errorf("logout failed: %w", err)
	}

	return true, nil
}

// GoogleAuthURL is the resolver for the googleAuthURL field.
func (r *mutationResolver) GoogleAuthURL(ctx context.Context, redirectURL string) (string, error) {
	authURL, state, err := r.OAuthService.GetAuthURL()
	if err != nil {
		return "", fmt.Errorf("failed to generate auth URL: %w", err)
	}

	_ = state // Ignore state for this simple implementation
	return authURL, nil
}

// GoogleCallback is the resolver for the googleCallback field.
func (r *mutationResolver) GoogleCallback(ctx context.Context, code string, state string, redirectURL string) (*model.AuthPayload, error) {
	authResp, err := r.OAuthService.HandleCallback(ctx, code, state)
	if err != nil {
		return nil, fmt.Errorf("OAuth callback failed: %w", err)
	}

	return &model.AuthPayload{
		Token:        authResp.AccessToken,
		RefreshToken: authResp.RefreshToken,
		User:         mapUserToGraphQL(authResp.User),
	}, nil
}

// Health resolver
func (r *queryResolver) Health(ctx context.Context) (*model.Health, error) {
	return &model.Health{Status: "ok", Time: time.Now().UTC()}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user := middleware.GetUserFromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("unauthorized: user not found in context")
	}

	return mapUserToGraphQL(user), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func mapUserToGraphQL(user *auth.User) *model.User {
	var googleID *string
	if user.GoogleID != nil && *user.GoogleID != "" {
		googleID = user.GoogleID
	}

	return &model.User{
		ID:            user.ID,
		Email:         user.Email,
		Name:          user.Name,
		EmailVerified: user.EmailVerified,
		GoogleID:      googleID,
		LastLogin:     user.LastLogin,
		CreatedAt:     user.CreatedAt,
		UpdatedAt:     user.UpdatedAt,
	}
}

type MutationResolver interface {
	Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error)
	Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error)
	RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.AuthPayload, error)
	Logout(ctx context.Context) (bool, error)
	GoogleAuthURL(ctx context.Context, redirectURL string) (string, error)
	GoogleCallback(ctx context.Context, code string, state string, redirectURL string) (*model.AuthPayload, error)
}
type QueryResolver interface {
	Health(ctx context.Context) (*model.Health, error)
	Me(ctx context.Context) (*model.User, error)
}
