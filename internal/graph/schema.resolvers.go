package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/volunteersync/backend/internal/core/event"
	"github.com/volunteersync/backend/internal/graph/generated"
	"github.com/volunteersync/backend/internal/graph/model"
	mw "github.com/volunteersync/backend/internal/middleware"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// GoogleAuthURL is the resolver for the googleAuthURL field.
func (r *mutationResolver) GoogleAuthURL(ctx context.Context, redirectURL string) (string, error) {
	panic(fmt.Errorf("not implemented: GoogleAuthURL - googleAuthURL"))
}

// GoogleCallback is the resolver for the googleCallback field.
func (r *mutationResolver) GoogleCallback(ctx context.Context, code string, state string, redirectURL string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: GoogleCallback - googleCallback"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	in := toDomainUpdateProfile(input)
	prof, err := r.UserService.UpdateProfile(ctx, userID, in)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// UploadProfilePicture is the resolver for the uploadProfilePicture field.
func (r *mutationResolver) UploadProfilePicture(ctx context.Context, file graphql.Upload) (string, error) {
	if r.UserService == nil {
		return "", fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return "", fmt.Errorf("unauthorized")
	}
	// Read file bytes
	buf := make([]byte, file.Size)
	n, err := file.File.Read(buf)
	if err != nil {
		return "", err
	}
	url, err := r.UserService.UploadProfilePicture(ctx, userID, buf[:n], file.ContentType)
	if err != nil {
		return "", err
	}
	return url, nil
}

// UpdateInterests is the resolver for the updateInterests field.
func (r *mutationResolver) UpdateInterests(ctx context.Context, input model.InterestInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	prof, err := r.UserService.UpdateInterests(ctx, userID, input.InterestIds)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// AddSkill is the resolver for the addSkill field.
func (r *mutationResolver) AddSkill(ctx context.Context, input model.SkillInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	prof, err := r.UserService.AddSkill(ctx, userID, toDomainSkillInput(input))
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// RemoveSkill is the resolver for the removeSkill field.
func (r *mutationResolver) RemoveSkill(ctx context.Context, skillID string) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	prof, err := r.UserService.RemoveSkill(ctx, userID, skillID)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// UpdatePrivacySettings is the resolver for the updatePrivacySettings field.
func (r *mutationResolver) UpdatePrivacySettings(ctx context.Context, input model.PrivacySettingsInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	in := toDomainPrivacyInput(input)
	prof, err := r.UserService.UpdatePrivacySettings(ctx, userID, in)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// UpdateNotificationPreferences is the resolver for the updateNotificationPreferences field.
func (r *mutationResolver) UpdateNotificationPreferences(ctx context.Context, input model.NotificationPreferencesInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	dom := toDomainNotifInput(input)
	prof, err := r.UserService.UpdateNotificationPreferences(ctx, userID, dom)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// DeactivateAccount is the resolver for the deactivateAccount field.
func (r *mutationResolver) DeactivateAccount(ctx context.Context, confirmationCode string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeactivateAccount - deactivateAccount"))
}

// ExportUserData is the resolver for the exportUserData field.
func (r *mutationResolver) ExportUserData(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: ExportUserData - exportUserData"))
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.CreateEventInput) (*model.Event, error) {
	// Get current user from context
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("authentication required")
	}

	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Convert GraphQL input to domain input
	domainInput := toDomainCreateEventInput(input)

	// Create event via service
	event, err := r.EventService.CreateEvent(ctx, userID, domainInput)
	if err != nil {
		return nil, fmt.Errorf("failed to create event: %w", err)
	}

	// Convert domain event to GraphQL event
	return toGraphQLEvent(event), nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id string, input model.UpdateEventInput) (*model.Event, error) {
	// Get current user from context
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("authentication required")
	}

	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Convert GraphQL input to domain input
	domainInput := toDomainUpdateEventInput(input)

	// Update event via service (eventID, userID)
	event, err := r.EventService.UpdateEvent(ctx, id, userID, domainInput)
	if err != nil {
		return nil, fmt.Errorf("failed to update event: %w", err)
	}

	// Convert domain event to GraphQL event
	return toGraphQLEvent(event), nil
}

// PublishEvent is the resolver for the publishEvent field.
func (r *mutationResolver) PublishEvent(ctx context.Context, id string) (*model.Event, error) {
	// Get current user from context
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("authentication required")
	}

	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Publish event via service (eventID, userID)
	event, err := r.EventService.PublishEvent(ctx, id, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to publish event: %w", err)
	}

	// Convert domain event to GraphQL event
	return toGraphQLEvent(event), nil
}

// CancelEvent is the resolver for the cancelEvent field.
func (r *mutationResolver) CancelEvent(ctx context.Context, id string, reason *string) (*model.Event, error) {
	// Get current user from context
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("authentication required")
	}

	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Convert reason pointer to string
	reasonStr := ""
	if reason != nil {
		reasonStr = *reason
	}

	// Cancel event via service (eventID, userID)
	event, err := r.EventService.CancelEvent(ctx, id, userID, reasonStr)
	if err != nil {
		return nil, fmt.Errorf("failed to cancel event: %w", err)
	}

	// Convert domain event to GraphQL event
	return toGraphQLEvent(event), nil
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (bool, error) {
	// Get current user from context
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return false, fmt.Errorf("authentication required")
	}

	// Check if EventService is available
	if r.EventService == nil {
		return false, fmt.Errorf("event service unavailable")
	}

	// Delete (archive) event via service (eventID, userID)
	if err := r.EventService.DeleteEvent(ctx, id, userID); err != nil {
		return false, fmt.Errorf("failed to delete event: %w", err)
	}

	return true, nil
}

// AddEventImage is the resolver for the addEventImage field.
func (r *mutationResolver) AddEventImage(ctx context.Context, eventID string, file graphql.Upload, altText *string, isPrimary *bool) (*model.EventImage, error) {
	panic(fmt.Errorf("not implemented: AddEventImage - addEventImage"))
}

// UpdateEventImage is the resolver for the updateEventImage field.
func (r *mutationResolver) UpdateEventImage(ctx context.Context, id string, altText *string, isPrimary *bool, displayOrder *int) (*model.EventImage, error) {
	panic(fmt.Errorf("not implemented: UpdateEventImage - updateEventImage"))
}

// DeleteEventImage is the resolver for the deleteEventImage field.
func (r *mutationResolver) DeleteEventImage(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEventImage - deleteEventImage"))
}

// CreateEventAnnouncement is the resolver for the createEventAnnouncement field.
func (r *mutationResolver) CreateEventAnnouncement(ctx context.Context, eventID string, title string, content string, isUrgent *bool) (*model.EventAnnouncement, error) {
	panic(fmt.Errorf("not implemented: CreateEventAnnouncement - createEventAnnouncement"))
}

// UpdateEventAnnouncement is the resolver for the updateEventAnnouncement field.
func (r *mutationResolver) UpdateEventAnnouncement(ctx context.Context, id string, title *string, content *string, isUrgent *bool) (*model.EventAnnouncement, error) {
	panic(fmt.Errorf("not implemented: UpdateEventAnnouncement - updateEventAnnouncement"))
}

// DeleteEventAnnouncement is the resolver for the deleteEventAnnouncement field.
func (r *mutationResolver) DeleteEventAnnouncement(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEventAnnouncement - deleteEventAnnouncement"))
}

// RegisterForEvent is the resolver for the registerForEvent field.
func (r *mutationResolver) RegisterForEvent(ctx context.Context, input model.RegisterForEventInput) (*model.Registration, error) {
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	registration, err := r.RegistrationService.RegisterForEvent(ctx, userID, input.EventId, *input.PersonalMessage)
	if err != nil {
		return nil, err
	}

	return toGraphRegistration(registration), nil
}

// BulkRegister is the resolver for the bulkRegister field.
func (r *mutationResolver) BulkRegister(ctx context.Context, input model.BulkRegistrationInput) ([]*model.Registration, error) {
	panic(fmt.Errorf("not implemented: BulkRegister - bulkRegister"))
}

// CancelRegistration is the resolver for the cancelRegistration field.
func (r *mutationResolver) CancelRegistration(ctx context.Context, registrationID string, reason *string) (*model.Registration, error) {
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	var reasonStr string
	if reason != nil {
		reasonStr = *reason
	}

	registration, err := r.RegistrationService.CancelRegistration(ctx, userID, registrationID, reasonStr)
	if err != nil {
		return nil, err
	}

	return toGraphRegistration(registration), nil
}

// ApproveRegistration is the resolver for the approveRegistration field.
func (r *mutationResolver) ApproveRegistration(ctx context.Context, input model.ApprovalDecisionInput) (*model.Registration, error) {
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	registration, err := r.RegistrationService.ApproveRegistration(ctx, userID, input.RegistrationID, input.Approved, *input.Notes)
	if err != nil {
		return nil, err
	}

	return toGraphRegistration(registration), nil
}

// CheckInVolunteer is the resolver for the checkInVolunteer field.
func (r *mutationResolver) CheckInVolunteer(ctx context.Context, input model.AttendanceInput) (*model.AttendanceRecord, error) {
	panic(fmt.Errorf("not implemented: CheckInVolunteer - checkInVolunteer"))
}

// MarkAttendance is the resolver for the markAttendance field.
func (r *mutationResolver) MarkAttendance(ctx context.Context, input model.AttendanceInput) (*model.AttendanceRecord, error) {
	panic(fmt.Errorf("not implemented: MarkAttendance - markAttendance"))
}

// PromoteFromWaitlist is the resolver for the promoteFromWaitlist field.
func (r *mutationResolver) PromoteFromWaitlist(ctx context.Context, registrationID string) (*model.Registration, error) {
	panic(fmt.Errorf("not implemented: PromoteFromWaitlist - promoteFromWaitlist"))
}

// TransferRegistration is the resolver for the transferRegistration field.
func (r *mutationResolver) TransferRegistration(ctx context.Context, registrationID string, newEventID string) (*model.Registration, error) {
	panic(fmt.Errorf("not implemented: TransferRegistration - transferRegistration"))
}

// UpdateRegistration is the resolver for the updateRegistration field.
func (r *mutationResolver) UpdateRegistration(ctx context.Context, registrationID string, personalMessage *string) (*model.Registration, error) {
	panic(fmt.Errorf("not implemented: UpdateRegistration - updateRegistration"))
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*model.Health, error) {
	return &model.Health{
		Status: "OK",
		Time:   time.Now(),
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	prof, err := r.UserService.GetProfileWithDetails(ctx, userID, userID, nil)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.PublicProfile, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	requesterID := mw.GetUserIDFromContext(ctx)
	// roles from claims could be used later
	prof, err := r.UserService.GetProfileWithDetails(ctx, id, requesterID, nil)
	if err != nil {
		return nil, err
	}
	return toGraphPublicProfile(prof), nil
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, filter model.UserSearchFilter, limit *int, offset *int) ([]*model.PublicProfile, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	l, o := 20, 0
	if limit != nil {
		l = *limit
	}
	if offset != nil {
		o = *offset
	}
	dom := toDomainSearchFilter(filter)
	res, err := r.UserService.SearchUsers(ctx, dom, l, o)
	if err != nil {
		return nil, err
	}
	out := make([]*model.PublicProfile, 0, len(res))
	for _, p := range res {
		out = append(out, toGraphPublicProfile(&p))
	}
	return out, nil
}

// Interests is the resolver for the interests field.
func (r *queryResolver) Interests(ctx context.Context) ([]*model.Interest, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	ints, err := r.UserService.ListInterests(ctx)
	if err != nil {
		return nil, err
	}
	out := make([]*model.Interest, 0, len(ints))
	for _, it := range ints {
		out = append(out, &model.Interest{ID: it.ID, Name: it.Name, Category: model.InterestCategory(it.Category)})
	}
	return out, nil
}

// UserActivity is the resolver for the userActivity field.
func (r *queryResolver) UserActivity(ctx context.Context) ([]*model.ActivityLog, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	logs, err := r.UserService.ListActivityLogs(ctx, userID, 50, 0)
	if err != nil {
		return nil, err
	}
	out := make([]*model.ActivityLog, 0, len(logs))
	for _, l := range logs {
		out = append(out, &model.ActivityLog{ID: l.ID, Action: l.Action, CreatedAt: l.CreatedAt})
	}
	return out, nil
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Get event by ID
	event, err := r.EventService.GetEventByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get event: %w", err)
	}

	// Convert domain event to GraphQL event
	return toGraphQLEvent(event), nil
}

// EventBySlug is the resolver for the eventBySlug field.
func (r *queryResolver) EventBySlug(ctx context.Context, slug string) (*model.Event, error) {
	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Get event by slug
	event, err := r.EventService.GetEventBySlug(ctx, slug)
	if err != nil {
		return nil, fmt.Errorf("failed to get event: %w", err)
	}

	// Convert domain event to GraphQL event
	return toGraphQLEvent(event), nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, filter *model.EventSearchFilter, sort *model.EventSortInput, first *int, after *string) (*model.EventConnection, error) {
	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Set default values
	limit := 20
	offset := 0
	if first != nil {
		limit = *first
	}

	// For simplicity, we'll use offset-based pagination for now
	// In production, cursor-based pagination would be preferred
	if after != nil {
		// Basic offset calculation from cursor - in production this would be more sophisticated
		offset = 20 // Placeholder implementation
	}

	// Convert GraphQL filter to domain filter
	domainFilter := event.EventSearchFilter{}
	if filter != nil {
		domainFilter = toDomainEventSearchFilter(*filter)
	}

	// Convert GraphQL sort to domain sort
	var domainSort *event.EventSortInput
	if sort != nil {
		domainSort = toDomainEventSortInput(*sort)
	}

	// Search events
	connection, err := r.EventService.SearchEvents(ctx, domainFilter, domainSort, limit, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to search events: %w", err)
	}

	// Convert domain connection to GraphQL connection
	return toGraphQLEventConnection(connection), nil
}

// SearchEvents is the resolver for the searchEvents field.
func (r *queryResolver) SearchEvents(ctx context.Context, query string, filter *model.EventSearchFilter, sort *model.EventSortInput, first *int, after *string) (*model.EventConnection, error) {
	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Set default values
	limit := 20
	offset := 0
	if first != nil {
		limit = *first
	}

	// For simplicity, we'll use offset-based pagination for now
	if after != nil {
		offset = 20 // Placeholder implementation
	}

	// Convert GraphQL filter to domain filter
	domainFilter := event.EventSearchFilter{
		Query: &query, // Set the search query
	}
	if filter != nil {
		// Merge additional filters
		additionalFilter := toDomainEventSearchFilter(*filter)
		domainFilter.Status = additionalFilter.Status
		domainFilter.Categories = additionalFilter.Categories
		domainFilter.TimeCommitment = additionalFilter.TimeCommitment
		domainFilter.Tags = additionalFilter.Tags
		domainFilter.Location = additionalFilter.Location
		domainFilter.Skills = additionalFilter.Skills
		domainFilter.Interests = additionalFilter.Interests
	}

	// Convert GraphQL sort to domain sort
	var domainSort *event.EventSortInput
	if sort != nil {
		domainSort = toDomainEventSortInput(*sort)
	}

	// Search events
	connection, err := r.EventService.SearchEvents(ctx, domainFilter, domainSort, limit, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to search events: %w", err)
	}

	// Convert domain connection to GraphQL connection
	return toGraphQLEventConnection(connection), nil
}

// MyEvents is the resolver for the myEvents field.
func (r *queryResolver) MyEvents(ctx context.Context, status []model.EventStatus, first *int, after *string) (*model.EventConnection, error) {
	// Get current user from context
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("authentication required")
	}

	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Set default values
	limit := 20
	offset := 0
	if first != nil {
		limit = *first
	}

	if after != nil {
		offset = 20 // Placeholder implementation
	}

	// Convert GraphQL status to domain status
	domainStatus := make([]event.EventStatus, len(status))
	for i, s := range status {
		domainStatus[i] = convertGraphQLEventStatus(s)
	}

	// Get user's events
	connection, err := r.EventService.GetUserEvents(ctx, userID, domainStatus, limit, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to get user events: %w", err)
	}

	// Convert domain connection to GraphQL connection
	return toGraphQLEventConnection(connection), nil
}

// NearbyEvents is the resolver for the nearbyEvents field.
func (r *queryResolver) NearbyEvents(ctx context.Context, coordinates model.CoordinatesInput, radius float64, filter *model.EventSearchFilter, first *int, after *string) (*model.EventConnection, error) {
	// Check if EventService is available
	if r.EventService == nil {
		return nil, fmt.Errorf("event service unavailable")
	}

	// Set default values
	limit := 20
	offset := 0
	if first != nil {
		limit = *first
	}

	if after != nil {
		offset = 20 // Placeholder implementation
	}

	// Convert GraphQL filter to domain filter
	domainFilter := event.EventSearchFilter{}
	if filter != nil {
		domainFilter = toDomainEventSearchFilter(*filter)
	}

	// Search nearby events
	connection, err := r.EventService.GetNearbyEvents(ctx, coordinates.Lat, coordinates.Lng, radius, domainFilter, limit, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to get nearby events: %w", err)
	}

	// Convert domain connection to GraphQL connection
	return toGraphQLEventConnection(connection), nil
}

// EventUpdates is the resolver for the eventUpdates field.
func (r *queryResolver) EventUpdates(ctx context.Context, eventID string, first *int, after *string) ([]*model.EventUpdate, error) {
	panic(fmt.Errorf("not implemented: EventUpdates - eventUpdates"))
}

// MyRegistrations is the resolver for the myRegistrations field.
func (r *queryResolver) MyRegistrations(ctx context.Context, filter *model.RegistrationFilterInput) ([]*model.Registration, error) {
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	registrations, err := r.RegistrationService.GetRegistrationsByUserID(ctx, userID)
	if err != nil {
		return nil, err
	}

	var result []*model.Registration
	for _, reg := range registrations {
		result = append(result, toGraphRegistration(reg))
	}

	return result, nil
}

// Registration is the resolver for the registration field.
func (r *queryResolver) Registration(ctx context.Context, id string) (*model.Registration, error) {
	registration, err := r.RegistrationService.GetRegistrationByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return toGraphRegistration(registration), nil
}

// EventRegistrations is the resolver for the eventRegistrations field.
func (r *queryResolver) EventRegistrations(ctx context.Context, eventID string, filter *model.RegistrationFilterInput) ([]*model.Registration, error) {
	registrations, err := r.RegistrationService.GetRegistrationsByEventID(ctx, eventID)
	if err != nil {
		return nil, err
	}

	var result []*model.Registration
	for _, reg := range registrations {
		result = append(result, toGraphRegistration(reg))
	}

	return result, nil
}

// WaitlistEntries is the resolver for the waitlistEntries field.
func (r *queryResolver) WaitlistEntries(ctx context.Context, eventID string) ([]*model.WaitlistEntry, error) {
	panic(fmt.Errorf("not implemented: WaitlistEntries - waitlistEntries"))
}

// RegistrationConflicts is the resolver for the registrationConflicts field.
func (r *queryResolver) RegistrationConflicts(ctx context.Context, eventID string) ([]*model.RegistrationConflict, error) {
	panic(fmt.Errorf("not implemented: RegistrationConflicts - registrationConflicts"))
}

// AttendanceRecords is the resolver for the attendanceRecords field.
func (r *queryResolver) AttendanceRecords(ctx context.Context, eventID string) ([]*model.AttendanceRecord, error) {
	panic(fmt.Errorf("not implemented: AttendanceRecords - attendanceRecords"))
}

// RegistrationStats is the resolver for the registrationStats field.
func (r *queryResolver) RegistrationStats(ctx context.Context, eventID string) (*model.RegistrationStats, error) {
	panic(fmt.Errorf("not implemented: RegistrationStats - registrationStats"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
