package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/volunteersync/backend/internal/graph/generated"
	"github.com/volunteersync/backend/internal/graph/model"
	mw "github.com/volunteersync/backend/internal/middleware"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// GoogleAuthURL is the resolver for the googleAuthURL field.
func (r *mutationResolver) GoogleAuthURL(ctx context.Context, redirectURL string) (string, error) {
	panic(fmt.Errorf("not implemented: GoogleAuthURL - googleAuthURL"))
}

// GoogleCallback is the resolver for the googleCallback field.
func (r *mutationResolver) GoogleCallback(ctx context.Context, code string, state string, redirectURL string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: GoogleCallback - googleCallback"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	in := toDomainUpdateProfile(input)
	prof, err := r.UserService.UpdateProfile(ctx, userID, in)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// UploadProfilePicture is the resolver for the uploadProfilePicture field.
func (r *mutationResolver) UploadProfilePicture(ctx context.Context, file graphql.Upload) (string, error) {
	if r.UserService == nil {
		return "", fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return "", fmt.Errorf("unauthorized")
	}
	// Read file bytes
	buf := make([]byte, file.Size)
	n, err := file.File.Read(buf)
	if err != nil {
		return "", err
	}
	url, err := r.UserService.UploadProfilePicture(ctx, userID, buf[:n], file.ContentType)
	if err != nil {
		return "", err
	}
	return url, nil
}

// UpdateInterests is the resolver for the updateInterests field.
func (r *mutationResolver) UpdateInterests(ctx context.Context, input model.InterestInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	prof, err := r.UserService.UpdateInterests(ctx, userID, input.InterestIds)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// AddSkill is the resolver for the addSkill field.
func (r *mutationResolver) AddSkill(ctx context.Context, input model.SkillInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	prof, err := r.UserService.AddSkill(ctx, userID, toDomainSkillInput(input))
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// RemoveSkill is the resolver for the removeSkill field.
func (r *mutationResolver) RemoveSkill(ctx context.Context, skillID string) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	prof, err := r.UserService.RemoveSkill(ctx, userID, skillID)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// UpdatePrivacySettings is the resolver for the updatePrivacySettings field.
func (r *mutationResolver) UpdatePrivacySettings(ctx context.Context, input model.PrivacySettingsInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	in := toDomainPrivacyInput(input)
	prof, err := r.UserService.UpdatePrivacySettings(ctx, userID, in)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// UpdateNotificationPreferences is the resolver for the updateNotificationPreferences field.
func (r *mutationResolver) UpdateNotificationPreferences(ctx context.Context, input model.NotificationPreferencesInput) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	dom := toDomainNotifInput(input)
	prof, err := r.UserService.UpdateNotificationPreferences(ctx, userID, dom)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// DeactivateAccount is the resolver for the deactivateAccount field.
func (r *mutationResolver) DeactivateAccount(ctx context.Context, confirmationCode string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeactivateAccount - deactivateAccount"))
}

// ExportUserData is the resolver for the exportUserData field.
func (r *mutationResolver) ExportUserData(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: ExportUserData - exportUserData"))
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*model.Health, error) {
	return &model.Health{
		Status: "OK",
		Time:   time.Now(),
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	prof, err := r.UserService.GetProfileWithDetails(ctx, userID, userID, nil)
	if err != nil {
		return nil, err
	}
	return toGraphUser(prof), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.PublicProfile, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	requesterID := mw.GetUserIDFromContext(ctx)
	// roles from claims could be used later
	prof, err := r.UserService.GetProfileWithDetails(ctx, id, requesterID, nil)
	if err != nil {
		return nil, err
	}
	return toGraphPublicProfile(prof), nil
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, filter model.UserSearchFilter, limit *int, offset *int) ([]*model.PublicProfile, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	l, o := 20, 0
	if limit != nil {
		l = *limit
	}
	if offset != nil {
		o = *offset
	}
	dom := toDomainSearchFilter(filter)
	res, err := r.UserService.SearchUsers(ctx, dom, l, o)
	if err != nil {
		return nil, err
	}
	out := make([]*model.PublicProfile, 0, len(res))
	for _, p := range res {
		out = append(out, toGraphPublicProfile(&p))
	}
	return out, nil
}

// Interests is the resolver for the interests field.
func (r *queryResolver) Interests(ctx context.Context) ([]*model.Interest, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	ints, err := r.UserService.ListInterests(ctx)
	if err != nil {
		return nil, err
	}
	out := make([]*model.Interest, 0, len(ints))
	for _, it := range ints {
		out = append(out, &model.Interest{ID: it.ID, Name: it.Name, Category: model.InterestCategory(it.Category)})
	}
	return out, nil
}

// UserActivity is the resolver for the userActivity field.
func (r *queryResolver) UserActivity(ctx context.Context) ([]*model.ActivityLog, error) {
	if r.UserService == nil {
		return nil, fmt.Errorf("service unavailable")
	}
	userID := mw.GetUserIDFromContext(ctx)
	if userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}
	logs, err := r.UserService.ListActivityLogs(ctx, userID, 50, 0)
	if err != nil {
		return nil, err
	}
	out := make([]*model.ActivityLog, 0, len(logs))
	for _, l := range logs {
		out = append(out, &model.ActivityLog{ID: l.ID, Action: l.Action, CreatedAt: l.CreatedAt})
	}
	return out, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
