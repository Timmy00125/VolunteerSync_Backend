scalar Time
scalar Upload

type Health {
  status: String!
  time: Time!
}

# Authentication Types
type User {
  id: ID!
  email: String!
  name: String!
  emailVerified: Boolean!
  googleId: String
  lastLogin: Time
  createdAt: Time!
  updatedAt: Time!

  # Phase 3 fields
  bio: String
  location: Location
  profilePicture: String
  interests: [Interest!]!
  skills: [Skill!]!
  roles: [String!]!
  isVerified: Boolean!
  joinedAt: Time!
  lastActiveAt: Time
  publicProfile: PublicProfile!
}

type AuthPayload {
  token: String!
  refreshToken: String!
  user: User!
}

# Event Types
type Event {
  id: ID!
  title: String!
  description: String
  startsAt: Time!
  endsAt: Time!
  createdAt: Time!
  updatedAt: Time!
}

# Phase 3 types
type PublicProfile {
  id: ID!
  name: String!
  bio: String
  location: Location
  profilePicture: String
  interests: [Interest!]!
  skills: [Skill!]!
  volunteerStats: VolunteerStats!
}

type VolunteerStats {
  hours: Int!
  eventsParticipated: Int!
}

type Interest {
  id: ID!
  name: String!
  category: InterestCategory!
}

type Skill {
  id: ID!
  name: String!
  proficiency: SkillProficiency!
  verified: Boolean!
}

type Location {
  city: String
  state: String
  country: String
  coordinates: Coordinates
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type PrivacySettings {
  profileVisibility: ProfileVisibility!
  showEmail: Boolean!
  showLocation: Boolean!
  allowMessaging: Boolean!
}

type NotificationPreferences {
  emailNotifications: Boolean!
  pushNotifications: Boolean!
  smsNotifications: Boolean!
  eventReminders: Boolean!
  newOpportunities: Boolean!
  newsletterSubscription: Boolean!
}

# Input Types
input RegisterInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

# Phase 3 inputs
input UpdateProfileInput {
  name: String
  bio: String
  location: LocationInput
}

input LocationInput {
  city: String
  state: String
  country: String
  lat: Float
  lng: Float
}

input InterestInput {
  interestIds: [ID!]!
}

input SkillInput {
  name: String!
  proficiency: SkillProficiency!
}

input PrivacySettingsInput {
  profileVisibility: ProfileVisibility
  showEmail: Boolean
  showLocation: Boolean
  allowMessaging: Boolean
}

input NotificationPreferencesInput {
  emailNotifications: Boolean
  pushNotifications: Boolean
  smsNotifications: Boolean
  eventReminders: Boolean
  newOpportunities: Boolean
  newsletterSubscription: Boolean
}

input UserSearchFilter {
  skills: [String!]
  interests: [ID!]
  location: LocationInput
  availability: AvailabilityStatus
  experience: ExperienceLevel
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  AWAY
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
}

enum ProfileVisibility {
  PUBLIC
  VOLUNTEERS_ONLY
  PRIVATE
}

enum SkillProficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum InterestCategory {
  ENVIRONMENT
  EDUCATION
  HEALTH
  COMMUNITY
  TECHNOLOGY
  ARTS
  SPORTS
  ANIMALS
}

type Query {
  health: Health!
  # Authentication Query
  me: User
  # Phase 3 Queries
  user(id: ID!): PublicProfile
  searchUsers(
    filter: UserSearchFilter!
    limit: Int
    offset: Int
  ): [PublicProfile!]!
  interests: [Interest!]!
  userActivity: [ActivityLog!]!
}

type Mutation {
  # Authentication Mutations
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  refreshToken(input: RefreshTokenInput!): AuthPayload!
  logout: Boolean!

  # Google OAuth URLs and callback
  googleAuthURL(redirectURL: String!): String!
  googleCallback(
    code: String!
    state: String!
    redirectURL: String!
  ): AuthPayload!

  # Phase 3 Mutations
  updateProfile(input: UpdateProfileInput!): User!
  uploadProfilePicture(file: Upload!): String!
  updateInterests(input: InterestInput!): User!
  addSkill(input: SkillInput!): User!
  removeSkill(skillId: ID!): User!
  updatePrivacySettings(input: PrivacySettingsInput!): User!
  updateNotificationPreferences(input: NotificationPreferencesInput!): User!
  changePassword(currentPassword: String!, newPassword: String!): Boolean!
  deactivateAccount(confirmationCode: String!): Boolean!
  exportUserData: String!
}

# Additional types used by queries
type ActivityLog {
  id: ID!
  action: String!
  ipAddress: String
  userAgent: String
  createdAt: Time!
}
